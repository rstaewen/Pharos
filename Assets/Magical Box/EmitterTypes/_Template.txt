using UnityEngine;
 
[MBEmitterTypeInfo(Menu = "Custom/%DISPLAYNAME%")]
public class MB%NAME%Emitter : MBEmitterType
{
	/// <summary>
    /// Gets a point inside the shape of this Emittertype
    /// </summary>
    /// <param name="PT">The new particle. Usually this isn't needed</param>
    /// <returns>Particles spawnpoint in emitter space</returns>
    /// <remarks>This is called by the emitter to get a spawn point for a new particle</remarks>
    public override Vector3 GetPosition(MBParticle PT)
    {
        return Vector3.zero;
    }

	/// <summary>
    /// Gets the initial heading of the new particle
    /// </summary>
    /// <param name="PT">The new Particle with its position already set</param>
    /// <returns>the initial heading</returns>
    public override Vector3 GetHeading(MBParticle PT)
    {
        return base.GetHeading(PT);
    }
    
	/// <summary>
    /// Called when the emitter starts playing
    /// </summary>
    /// <remarks>Override this to initialize an EmitterType</remarks>
    public override void OnPlay()
    {
    }
  
	/// <summary>
    /// Validate/Check/Limit fields and properties here
    /// </summary>
    /// <remarks>This is called by the editor after values were changed by the user.</remarks>
    public override void Validate()
    {
        base.Validate();
    }

	/// <summary>
    /// Restore default settings
    /// </summary>
	public override void Reset()
	{

	}

	/// <summary>
    /// Gizmo drawing method, called by OnDrawGizmos and OnDrawGizmosSelected. Place your gizmo code here!
    /// </summary>
    /// <remarks>Gizmo-Visibility will be set by the user in the editor</remarks>
    protected override void DoGizmos()
    {
        Gizmos.color = GizmoColor1;
        Gizmos.matrix = Matrix4x4.TRS(Transform.position, Transform.rotation, Scale);
		// === DO SOME GIZMO DRAWING STUFF HERE === (MBUtility contains some helper methods)
    }
    
}


